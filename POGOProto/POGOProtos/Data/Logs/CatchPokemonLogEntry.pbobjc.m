// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/Logs/CatchPokemonLogEntry.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Data/Logs/CatchPokemonLogEntry.pbobjc.h"
 #import "POGOProtos/Enums/PokemonId.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOCatchPokemonLogEntryRoot

@implementation POGOCatchPokemonLogEntryRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[POGOPokemonIdRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - POGOCatchPokemonLogEntryRoot_FileDescriptor

static GPBFileDescriptor *POGOCatchPokemonLogEntryRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data.Logs"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - POGOCatchPokemonLogEntry

@implementation POGOCatchPokemonLogEntry

@dynamic result;
@dynamic pokemonId;
@dynamic combatPoints;
@dynamic pokemonDataId;

typedef struct POGOCatchPokemonLogEntry__storage_ {
  uint32_t _has_storage_[1];
  POGOCatchPokemonLogEntry_Result result;
  POGOPokemonId pokemonId;
  int32_t combatPoints;
  uint64_t pokemonDataId;
} POGOCatchPokemonLogEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = POGOCatchPokemonLogEntry_Result_EnumDescriptor,
        .number = POGOCatchPokemonLogEntry_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POGOCatchPokemonLogEntry__storage_, result),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "pokemonId",
        .dataTypeSpecific.enumDescFunc = POGOPokemonId_EnumDescriptor,
        .number = POGOCatchPokemonLogEntry_FieldNumber_PokemonId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POGOCatchPokemonLogEntry__storage_, pokemonId),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "combatPoints",
        .dataTypeSpecific.className = NULL,
        .number = POGOCatchPokemonLogEntry_FieldNumber_CombatPoints,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POGOCatchPokemonLogEntry__storage_, combatPoints),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pokemonDataId",
        .dataTypeSpecific.className = NULL,
        .number = POGOCatchPokemonLogEntry_FieldNumber_PokemonDataId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POGOCatchPokemonLogEntry__storage_, pokemonDataId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POGOCatchPokemonLogEntry class]
                                     rootClass:[POGOCatchPokemonLogEntryRoot class]
                                          file:POGOCatchPokemonLogEntryRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POGOCatchPokemonLogEntry__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POGOCatchPokemonLogEntry_Result_RawValue(POGOCatchPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [POGOCatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOCatchPokemonLogEntry_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOCatchPokemonLogEntry_Result_RawValue(POGOCatchPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOCatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOCatchPokemonLogEntry_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POGOCatchPokemonLogEntry_PokemonId_RawValue(POGOCatchPokemonLogEntry *message) {
  GPBDescriptor *descriptor = [POGOCatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOCatchPokemonLogEntry_FieldNumber_PokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOCatchPokemonLogEntry_PokemonId_RawValue(POGOCatchPokemonLogEntry *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOCatchPokemonLogEntry descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOCatchPokemonLogEntry_FieldNumber_PokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum POGOCatchPokemonLogEntry_Result

GPBEnumDescriptor *POGOCatchPokemonLogEntry_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000PokemonCaptured\000PokemonFled\000";
    static const int32_t values[] = {
        POGOCatchPokemonLogEntry_Result_Unset,
        POGOCatchPokemonLogEntry_Result_PokemonCaptured,
        POGOCatchPokemonLogEntry_Result_PokemonFled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POGOCatchPokemonLogEntry_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POGOCatchPokemonLogEntry_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POGOCatchPokemonLogEntry_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case POGOCatchPokemonLogEntry_Result_Unset:
    case POGOCatchPokemonLogEntry_Result_PokemonCaptured:
    case POGOCatchPokemonLogEntry_Result_PokemonFled:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
