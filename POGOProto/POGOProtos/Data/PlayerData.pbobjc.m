// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PlayerData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Data/PlayerData.pbobjc.h"
 #import "POGOProtos/Enums/TutorialState.pbobjc.h"
 #import "POGOProtos/Data/Player/PlayerAvatar.pbobjc.h"
 #import "POGOProtos/Data/Player/DailyBonus.pbobjc.h"
 #import "POGOProtos/Data/Player/EquippedBadge.pbobjc.h"
 #import "POGOProtos/Data/Player/ContactSettings.pbobjc.h"
 #import "POGOProtos/Data/Player/Currency.pbobjc.h"
 #import "POGOProtos/Enums/TeamColor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOPlayerDataRoot

@implementation POGOPlayerDataRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[POGOTutorialStateRoot extensionRegistry]];
    [registry addExtensions:[POGOPlayerAvatarRoot extensionRegistry]];
    [registry addExtensions:[POGODailyBonusRoot extensionRegistry]];
    [registry addExtensions:[POGOEquippedBadgeRoot extensionRegistry]];
    [registry addExtensions:[POGOContactSettingsRoot extensionRegistry]];
    [registry addExtensions:[POGOCurrencyRoot extensionRegistry]];
    [registry addExtensions:[POGOTeamColorRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - POGOPlayerDataRoot_FileDescriptor

static GPBFileDescriptor *POGOPlayerDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - POGOPlayerData

@implementation POGOPlayerData

@dynamic creationTimestampMs;
@dynamic username;
@dynamic team;
@dynamic tutorialStateArray, tutorialStateArray_Count;
@dynamic hasAvatar, avatar;
@dynamic maxPokemonStorage;
@dynamic maxItemStorage;
@dynamic hasDailyBonus, dailyBonus;
@dynamic hasEquippedBadge, equippedBadge;
@dynamic hasContactSettings, contactSettings;
@dynamic currenciesArray, currenciesArray_Count;

typedef struct POGOPlayerData__storage_ {
  uint32_t _has_storage_[1];
  POGOTeamColor team;
  int32_t maxPokemonStorage;
  int32_t maxItemStorage;
  NSString *username;
  GPBEnumArray *tutorialStateArray;
  POGOPlayerAvatar *avatar;
  POGODailyBonus *dailyBonus;
  POGOEquippedBadge *equippedBadge;
  POGOContactSettings *contactSettings;
  NSMutableArray *currenciesArray;
  int64_t creationTimestampMs;
} POGOPlayerData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "creationTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = POGOPlayerData_FieldNumber_CreationTimestampMs,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, creationTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "username",
        .dataTypeSpecific.className = NULL,
        .number = POGOPlayerData_FieldNumber_Username,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, username),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "team",
        .dataTypeSpecific.enumDescFunc = POGOTeamColor_EnumDescriptor,
        .number = POGOPlayerData_FieldNumber_Team,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, team),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "tutorialStateArray",
        .dataTypeSpecific.enumDescFunc = POGOTutorialState_EnumDescriptor,
        .number = POGOPlayerData_FieldNumber_TutorialStateArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, tutorialStateArray),
        .flags = GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "avatar",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOPlayerAvatar),
        .number = POGOPlayerData_FieldNumber_Avatar,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, avatar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "maxPokemonStorage",
        .dataTypeSpecific.className = NULL,
        .number = POGOPlayerData_FieldNumber_MaxPokemonStorage,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, maxPokemonStorage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "maxItemStorage",
        .dataTypeSpecific.className = NULL,
        .number = POGOPlayerData_FieldNumber_MaxItemStorage,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, maxItemStorage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "dailyBonus",
        .dataTypeSpecific.className = GPBStringifySymbol(POGODailyBonus),
        .number = POGOPlayerData_FieldNumber_DailyBonus,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, dailyBonus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "equippedBadge",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOEquippedBadge),
        .number = POGOPlayerData_FieldNumber_EquippedBadge,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, equippedBadge),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contactSettings",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOContactSettings),
        .number = POGOPlayerData_FieldNumber_ContactSettings,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, contactSettings),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "currenciesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOCurrency),
        .number = POGOPlayerData_FieldNumber_CurrenciesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(POGOPlayerData__storage_, currenciesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POGOPlayerData class]
                                     rootClass:[POGOPlayerDataRoot class]
                                          file:POGOPlayerDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POGOPlayerData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POGOPlayerData_Team_RawValue(POGOPlayerData *message) {
  GPBDescriptor *descriptor = [POGOPlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOPlayerData_FieldNumber_Team];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOPlayerData_Team_RawValue(POGOPlayerData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOPlayerData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOPlayerData_FieldNumber_Team];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
