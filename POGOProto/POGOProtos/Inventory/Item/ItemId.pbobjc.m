// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Inventory/Item/ItemId.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Inventory/Item/ItemId.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOItemIdRoot

@implementation POGOItemIdRoot

@end

#pragma mark - Enum POGOItemId

GPBEnumDescriptor *POGOItemId_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "ItemUnknown\000ItemPokeBall\000ItemGreatBall\000I"
        "temUltraBall\000ItemMasterBall\000ItemPotion\000I"
        "temSuperPotion\000ItemHyperPotion\000ItemMaxPo"
        "tion\000ItemRevive\000ItemMaxRevive\000ItemLuckyE"
        "gg\000ItemIncenseOrdinary\000ItemIncenseSpicy\000"
        "ItemIncenseCool\000ItemIncenseFloral\000ItemTr"
        "oyDisk\000ItemXAttack\000ItemXDefense\000ItemXMir"
        "acle\000ItemRazzBerry\000ItemBlukBerry\000ItemNan"
        "abBerry\000ItemWeparBerry\000ItemPinapBerry\000It"
        "emSpecialCamera\000ItemIncubatorBasicUnlimi"
        "ted\000ItemIncubatorBasic\000ItemPokemonStorag"
        "eUpgrade\000ItemItemStorageUpgrade\000";
    static const int32_t values[] = {
        POGOItemId_ItemUnknown,
        POGOItemId_ItemPokeBall,
        POGOItemId_ItemGreatBall,
        POGOItemId_ItemUltraBall,
        POGOItemId_ItemMasterBall,
        POGOItemId_ItemPotion,
        POGOItemId_ItemSuperPotion,
        POGOItemId_ItemHyperPotion,
        POGOItemId_ItemMaxPotion,
        POGOItemId_ItemRevive,
        POGOItemId_ItemMaxRevive,
        POGOItemId_ItemLuckyEgg,
        POGOItemId_ItemIncenseOrdinary,
        POGOItemId_ItemIncenseSpicy,
        POGOItemId_ItemIncenseCool,
        POGOItemId_ItemIncenseFloral,
        POGOItemId_ItemTroyDisk,
        POGOItemId_ItemXAttack,
        POGOItemId_ItemXDefense,
        POGOItemId_ItemXMiracle,
        POGOItemId_ItemRazzBerry,
        POGOItemId_ItemBlukBerry,
        POGOItemId_ItemNanabBerry,
        POGOItemId_ItemWeparBerry,
        POGOItemId_ItemPinapBerry,
        POGOItemId_ItemSpecialCamera,
        POGOItemId_ItemIncubatorBasicUnlimited,
        POGOItemId_ItemIncubatorBasic,
        POGOItemId_ItemPokemonStorageUpgrade,
        POGOItemId_ItemItemStorageUpgrade,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POGOItemId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POGOItemId_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POGOItemId_IsValidValue(int32_t value__) {
  switch (value__) {
    case POGOItemId_ItemUnknown:
    case POGOItemId_ItemPokeBall:
    case POGOItemId_ItemGreatBall:
    case POGOItemId_ItemUltraBall:
    case POGOItemId_ItemMasterBall:
    case POGOItemId_ItemPotion:
    case POGOItemId_ItemSuperPotion:
    case POGOItemId_ItemHyperPotion:
    case POGOItemId_ItemMaxPotion:
    case POGOItemId_ItemRevive:
    case POGOItemId_ItemMaxRevive:
    case POGOItemId_ItemLuckyEgg:
    case POGOItemId_ItemIncenseOrdinary:
    case POGOItemId_ItemIncenseSpicy:
    case POGOItemId_ItemIncenseCool:
    case POGOItemId_ItemIncenseFloral:
    case POGOItemId_ItemTroyDisk:
    case POGOItemId_ItemXAttack:
    case POGOItemId_ItemXDefense:
    case POGOItemId_ItemXMiracle:
    case POGOItemId_ItemRazzBerry:
    case POGOItemId_ItemBlukBerry:
    case POGOItemId_ItemNanabBerry:
    case POGOItemId_ItemWeparBerry:
    case POGOItemId_ItemPinapBerry:
    case POGOItemId_ItemSpecialCamera:
    case POGOItemId_ItemIncubatorBasicUnlimited:
    case POGOItemId_ItemIncubatorBasic:
    case POGOItemId_ItemPokemonStorageUpgrade:
    case POGOItemId_ItemItemStorageUpgrade:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
