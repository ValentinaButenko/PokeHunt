// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Map/Fort/FortData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Map/Fort/FortData.pbobjc.h"
 #import "POGOProtos/Enums/PokemonId.pbobjc.h"
 #import "POGOProtos/Enums/TeamColor.pbobjc.h"
 #import "POGOProtos/Map/Fort/FortType.pbobjc.h"
 #import "POGOProtos/Map/Fort/FortSponsor.pbobjc.h"
 #import "POGOProtos/Map/Fort/FortRenderingType.pbobjc.h"
 #import "POGOProtos/Map/Fort/FortLureInfo.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOFortDataRoot

@implementation POGOFortDataRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[POGOPokemonIdRoot extensionRegistry]];
    [registry addExtensions:[POGOTeamColorRoot extensionRegistry]];
    [registry addExtensions:[POGOFortTypeRoot extensionRegistry]];
    [registry addExtensions:[POGOFortSponsorRoot extensionRegistry]];
    [registry addExtensions:[POGOFortRenderingTypeRoot extensionRegistry]];
    [registry addExtensions:[POGOFortLureInfoRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - POGOFortDataRoot_FileDescriptor

static GPBFileDescriptor *POGOFortDataRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Map.Fort"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - POGOFortData

@implementation POGOFortData

@dynamic id_p;
@dynamic lastModifiedTimestampMs;
@dynamic latitude;
@dynamic longitude;
@dynamic enabled;
@dynamic type;
@dynamic ownedByTeam;
@dynamic guardPokemonId;
@dynamic guardPokemonCp;
@dynamic gymPoints;
@dynamic isInBattle;
@dynamic cooldownCompleteTimestampMs;
@dynamic sponsor;
@dynamic renderingType;
@dynamic activeFortModifier;
@dynamic hasLureInfo, lureInfo;

typedef struct POGOFortData__storage_ {
  uint32_t _has_storage_[1];
  POGOTeamColor ownedByTeam;
  POGOPokemonId guardPokemonId;
  int32_t guardPokemonCp;
  POGOFortType type;
  POGOFortSponsor sponsor;
  POGOFortRenderingType renderingType;
  NSString *id_p;
  NSData *activeFortModifier;
  POGOFortLureInfo *lureInfo;
  int64_t lastModifiedTimestampMs;
  double latitude;
  double longitude;
  int64_t gymPoints;
  int64_t cooldownCompleteTimestampMs;
} POGOFortData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastModifiedTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_LastModifiedTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, lastModifiedTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "latitude",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_Latitude,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, latitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "longitude",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_Longitude,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, longitude),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "ownedByTeam",
        .dataTypeSpecific.enumDescFunc = POGOTeamColor_EnumDescriptor,
        .number = POGOFortData_FieldNumber_OwnedByTeam,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, ownedByTeam),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "guardPokemonId",
        .dataTypeSpecific.enumDescFunc = POGOPokemonId_EnumDescriptor,
        .number = POGOFortData_FieldNumber_GuardPokemonId,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, guardPokemonId),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "guardPokemonCp",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_GuardPokemonCp,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, guardPokemonCp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "enabled",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_Enabled,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = POGOFortType_EnumDescriptor,
        .number = POGOFortData_FieldNumber_Type,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "gymPoints",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_GymPoints,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, gymPoints),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "isInBattle",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_IsInBattle,
        .hasIndex = 11,
        .offset = 12,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "activeFortModifier",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_ActiveFortModifier,
        .hasIndex = 16,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, activeFortModifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "lureInfo",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOFortLureInfo),
        .number = POGOFortData_FieldNumber_LureInfo,
        .hasIndex = 17,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, lureInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cooldownCompleteTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = POGOFortData_FieldNumber_CooldownCompleteTimestampMs,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, cooldownCompleteTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "sponsor",
        .dataTypeSpecific.enumDescFunc = POGOFortSponsor_EnumDescriptor,
        .number = POGOFortData_FieldNumber_Sponsor,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, sponsor),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "renderingType",
        .dataTypeSpecific.enumDescFunc = POGOFortRenderingType_EnumDescriptor,
        .number = POGOFortData_FieldNumber_RenderingType,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(POGOFortData__storage_, renderingType),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POGOFortData class]
                                     rootClass:[POGOFortDataRoot class]
                                          file:POGOFortDataRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POGOFortData__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POGOFortData_Type_RawValue(POGOFortData *message) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOFortData_Type_RawValue(POGOFortData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POGOFortData_OwnedByTeam_RawValue(POGOFortData *message) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_OwnedByTeam];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOFortData_OwnedByTeam_RawValue(POGOFortData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_OwnedByTeam];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POGOFortData_GuardPokemonId_RawValue(POGOFortData *message) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_GuardPokemonId];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOFortData_GuardPokemonId_RawValue(POGOFortData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_GuardPokemonId];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POGOFortData_Sponsor_RawValue(POGOFortData *message) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_Sponsor];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOFortData_Sponsor_RawValue(POGOFortData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_Sponsor];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t POGOFortData_RenderingType_RawValue(POGOFortData *message) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_RenderingType];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOFortData_RenderingType_RawValue(POGOFortData *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOFortData descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOFortData_FieldNumber_RenderingType];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
