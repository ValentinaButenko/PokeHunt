// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Map/Fort/FortData.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class POGOFortLureInfo;
GPB_ENUM_FWD_DECLARE(POGOFortRenderingType);
GPB_ENUM_FWD_DECLARE(POGOFortSponsor);
GPB_ENUM_FWD_DECLARE(POGOFortType);
GPB_ENUM_FWD_DECLARE(POGOPokemonId);
GPB_ENUM_FWD_DECLARE(POGOTeamColor);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - POGOFortDataRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface POGOFortDataRoot : GPBRootObject
@end

#pragma mark - POGOFortData

typedef GPB_ENUM(POGOFortData_FieldNumber) {
  POGOFortData_FieldNumber_Id_p = 1,
  POGOFortData_FieldNumber_LastModifiedTimestampMs = 2,
  POGOFortData_FieldNumber_Latitude = 3,
  POGOFortData_FieldNumber_Longitude = 4,
  POGOFortData_FieldNumber_OwnedByTeam = 5,
  POGOFortData_FieldNumber_GuardPokemonId = 6,
  POGOFortData_FieldNumber_GuardPokemonCp = 7,
  POGOFortData_FieldNumber_Enabled = 8,
  POGOFortData_FieldNumber_Type = 9,
  POGOFortData_FieldNumber_GymPoints = 10,
  POGOFortData_FieldNumber_IsInBattle = 11,
  POGOFortData_FieldNumber_ActiveFortModifier = 12,
  POGOFortData_FieldNumber_LureInfo = 13,
  POGOFortData_FieldNumber_CooldownCompleteTimestampMs = 14,
  POGOFortData_FieldNumber_Sponsor = 15,
  POGOFortData_FieldNumber_RenderingType = 16,
};

@interface POGOFortData : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *id_p;

@property(nonatomic, readwrite) int64_t lastModifiedTimestampMs;

@property(nonatomic, readwrite) double latitude;

@property(nonatomic, readwrite) double longitude;

@property(nonatomic, readwrite) BOOL enabled;

@property(nonatomic, readwrite) enum POGOFortType type;

/// Team that owns the gym
@property(nonatomic, readwrite) enum POGOTeamColor ownedByTeam;

/// Highest CP Pokemon at the gym
@property(nonatomic, readwrite) enum POGOPokemonId guardPokemonId;

@property(nonatomic, readwrite) int32_t guardPokemonCp;

/// Prestigate / experience of the gym
@property(nonatomic, readwrite) int64_t gymPoints;

/// Whether someone is battling at the gym currently
@property(nonatomic, readwrite) BOOL isInBattle;

/// Timestamp when the pokestop can be activated again to get items / xp
@property(nonatomic, readwrite) int64_t cooldownCompleteTimestampMs;

@property(nonatomic, readwrite) enum POGOFortSponsor sponsor;

@property(nonatomic, readwrite) enum POGOFortRenderingType renderingType;

/// Might represent the type of item applied to the pokestop, right now only lures can be applied
@property(nonatomic, readwrite, copy, null_resettable) NSData *activeFortModifier;

@property(nonatomic, readwrite, strong, null_resettable) POGOFortLureInfo *lureInfo;
/// Test to see if @c lureInfo has been set.
@property(nonatomic, readwrite) BOOL hasLureInfo;

@end

/// Fetches the raw value of a @c POGOFortData's @c type property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOFortData_Type_RawValue(POGOFortData *message);
/// Sets the raw value of an @c POGOFortData's @c type property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOFortData_Type_RawValue(POGOFortData *message, int32_t value);

/// Fetches the raw value of a @c POGOFortData's @c ownedByTeam property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOFortData_OwnedByTeam_RawValue(POGOFortData *message);
/// Sets the raw value of an @c POGOFortData's @c ownedByTeam property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOFortData_OwnedByTeam_RawValue(POGOFortData *message, int32_t value);

/// Fetches the raw value of a @c POGOFortData's @c guardPokemonId property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOFortData_GuardPokemonId_RawValue(POGOFortData *message);
/// Sets the raw value of an @c POGOFortData's @c guardPokemonId property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOFortData_GuardPokemonId_RawValue(POGOFortData *message, int32_t value);

/// Fetches the raw value of a @c POGOFortData's @c sponsor property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOFortData_Sponsor_RawValue(POGOFortData *message);
/// Sets the raw value of an @c POGOFortData's @c sponsor property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOFortData_Sponsor_RawValue(POGOFortData *message, int32_t value);

/// Fetches the raw value of a @c POGOFortData's @c renderingType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOFortData_RenderingType_RawValue(POGOFortData *message);
/// Sets the raw value of an @c POGOFortData's @c renderingType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOFortData_RenderingType_RawValue(POGOFortData *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
