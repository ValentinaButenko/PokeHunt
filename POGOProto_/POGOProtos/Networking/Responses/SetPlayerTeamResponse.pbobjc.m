// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/SetPlayerTeamResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Networking/Responses/SetPlayerTeamResponse.pbobjc.h"
 #import "POGOProtos/Data/PlayerData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOSetPlayerTeamResponseRoot

@implementation POGOSetPlayerTeamResponseRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[POGOPlayerDataRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - POGOSetPlayerTeamResponseRoot_FileDescriptor

static GPBFileDescriptor *POGOSetPlayerTeamResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - POGOSetPlayerTeamResponse

@implementation POGOSetPlayerTeamResponse

@dynamic status;
@dynamic hasPlayerData, playerData;

typedef struct POGOSetPlayerTeamResponse__storage_ {
  uint32_t _has_storage_[1];
  POGOSetPlayerTeamResponse_Status status;
  POGOPlayerData *playerData;
} POGOSetPlayerTeamResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = POGOSetPlayerTeamResponse_Status_EnumDescriptor,
        .number = POGOSetPlayerTeamResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POGOSetPlayerTeamResponse__storage_, status),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playerData",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOPlayerData),
        .number = POGOSetPlayerTeamResponse_FieldNumber_PlayerData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POGOSetPlayerTeamResponse__storage_, playerData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POGOSetPlayerTeamResponse class]
                                     rootClass:[POGOSetPlayerTeamResponseRoot class]
                                          file:POGOSetPlayerTeamResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POGOSetPlayerTeamResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POGOSetPlayerTeamResponse_Status_RawValue(POGOSetPlayerTeamResponse *message) {
  GPBDescriptor *descriptor = [POGOSetPlayerTeamResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOSetPlayerTeamResponse_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOSetPlayerTeamResponse_Status_RawValue(POGOSetPlayerTeamResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOSetPlayerTeamResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOSetPlayerTeamResponse_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum POGOSetPlayerTeamResponse_Status

GPBEnumDescriptor *POGOSetPlayerTeamResponse_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Success\000TeamAlreadySet\000Failure\000";
    static const int32_t values[] = {
        POGOSetPlayerTeamResponse_Status_Unset,
        POGOSetPlayerTeamResponse_Status_Success,
        POGOSetPlayerTeamResponse_Status_TeamAlreadySet,
        POGOSetPlayerTeamResponse_Status_Failure,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POGOSetPlayerTeamResponse_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POGOSetPlayerTeamResponse_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POGOSetPlayerTeamResponse_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case POGOSetPlayerTeamResponse_Status_Unset:
    case POGOSetPlayerTeamResponse_Status_Success:
    case POGOSetPlayerTeamResponse_Status_TeamAlreadySet:
    case POGOSetPlayerTeamResponse_Status_Failure:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
