// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/StartGymBattleResponse.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "POGOProtos/Networking/Responses/StartGymBattleResponse.pbobjc.h"
 #import "POGOProtos/Data/Battle/BattleLog.pbobjc.h"
 #import "POGOProtos/Data/Battle/BattleParticipant.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - POGOStartGymBattleResponseRoot

@implementation POGOStartGymBattleResponseRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[POGOBattleLogRoot extensionRegistry]];
    [registry addExtensions:[POGOBattleParticipantRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - POGOStartGymBattleResponseRoot_FileDescriptor

static GPBFileDescriptor *POGOStartGymBattleResponseRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"POGOProtos.Networking.Responses"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - POGOStartGymBattleResponse

@implementation POGOStartGymBattleResponse

@dynamic result;
@dynamic battleStartTimestampMs;
@dynamic battleEndTimestampMs;
@dynamic battleId;
@dynamic hasDefender, defender;
@dynamic hasBattleLog, battleLog;

typedef struct POGOStartGymBattleResponse__storage_ {
  uint32_t _has_storage_[1];
  POGOStartGymBattleResponse_Result result;
  NSString *battleId;
  POGOBattleParticipant *defender;
  POGOBattleLog *battleLog;
  int64_t battleStartTimestampMs;
  int64_t battleEndTimestampMs;
} POGOStartGymBattleResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "result",
        .dataTypeSpecific.enumDescFunc = POGOStartGymBattleResponse_Result_EnumDescriptor,
        .number = POGOStartGymBattleResponse_FieldNumber_Result,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, result),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "battleStartTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = POGOStartGymBattleResponse_FieldNumber_BattleStartTimestampMs,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, battleStartTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "battleEndTimestampMs",
        .dataTypeSpecific.className = NULL,
        .number = POGOStartGymBattleResponse_FieldNumber_BattleEndTimestampMs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, battleEndTimestampMs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "battleId",
        .dataTypeSpecific.className = NULL,
        .number = POGOStartGymBattleResponse_FieldNumber_BattleId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, battleId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "defender",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOBattleParticipant),
        .number = POGOStartGymBattleResponse_FieldNumber_Defender,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, defender),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "battleLog",
        .dataTypeSpecific.className = GPBStringifySymbol(POGOBattleLog),
        .number = POGOStartGymBattleResponse_FieldNumber_BattleLog,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(POGOStartGymBattleResponse__storage_, battleLog),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[POGOStartGymBattleResponse class]
                                     rootClass:[POGOStartGymBattleResponseRoot class]
                                          file:POGOStartGymBattleResponseRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(POGOStartGymBattleResponse__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t POGOStartGymBattleResponse_Result_RawValue(POGOStartGymBattleResponse *message) {
  GPBDescriptor *descriptor = [POGOStartGymBattleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOStartGymBattleResponse_FieldNumber_Result];
  return GPBGetMessageInt32Field(message, field);
}

void SetPOGOStartGymBattleResponse_Result_RawValue(POGOStartGymBattleResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [POGOStartGymBattleResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:POGOStartGymBattleResponse_FieldNumber_Result];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum POGOStartGymBattleResponse_Result

GPBEnumDescriptor *POGOStartGymBattleResponse_Result_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Unset\000Success\000ErrorGymNotFound\000ErrorGymN"
        "eutral\000ErrorGymWrongTeam\000ErrorGymEmpty\000E"
        "rrorInvalidDefender\000ErrorTrainingInvalid"
        "AttackerCount\000ErrorAllPokemonFainted\000Err"
        "orTooManyBattles\000ErrorTooManyPlayers\000Err"
        "orGymBattleLockout\000ErrorPlayerBelowMinim"
        "umLevel\000ErrorNotInRange\000";
    static const int32_t values[] = {
        POGOStartGymBattleResponse_Result_Unset,
        POGOStartGymBattleResponse_Result_Success,
        POGOStartGymBattleResponse_Result_ErrorGymNotFound,
        POGOStartGymBattleResponse_Result_ErrorGymNeutral,
        POGOStartGymBattleResponse_Result_ErrorGymWrongTeam,
        POGOStartGymBattleResponse_Result_ErrorGymEmpty,
        POGOStartGymBattleResponse_Result_ErrorInvalidDefender,
        POGOStartGymBattleResponse_Result_ErrorTrainingInvalidAttackerCount,
        POGOStartGymBattleResponse_Result_ErrorAllPokemonFainted,
        POGOStartGymBattleResponse_Result_ErrorTooManyBattles,
        POGOStartGymBattleResponse_Result_ErrorTooManyPlayers,
        POGOStartGymBattleResponse_Result_ErrorGymBattleLockout,
        POGOStartGymBattleResponse_Result_ErrorPlayerBelowMinimumLevel,
        POGOStartGymBattleResponse_Result_ErrorNotInRange,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(POGOStartGymBattleResponse_Result)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:POGOStartGymBattleResponse_Result_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL POGOStartGymBattleResponse_Result_IsValidValue(int32_t value__) {
  switch (value__) {
    case POGOStartGymBattleResponse_Result_Unset:
    case POGOStartGymBattleResponse_Result_Success:
    case POGOStartGymBattleResponse_Result_ErrorGymNotFound:
    case POGOStartGymBattleResponse_Result_ErrorGymNeutral:
    case POGOStartGymBattleResponse_Result_ErrorGymWrongTeam:
    case POGOStartGymBattleResponse_Result_ErrorGymEmpty:
    case POGOStartGymBattleResponse_Result_ErrorInvalidDefender:
    case POGOStartGymBattleResponse_Result_ErrorTrainingInvalidAttackerCount:
    case POGOStartGymBattleResponse_Result_ErrorAllPokemonFainted:
    case POGOStartGymBattleResponse_Result_ErrorTooManyBattles:
    case POGOStartGymBattleResponse_Result_ErrorTooManyPlayers:
    case POGOStartGymBattleResponse_Result_ErrorGymBattleLockout:
    case POGOStartGymBattleResponse_Result_ErrorPlayerBelowMinimumLevel:
    case POGOStartGymBattleResponse_Result_ErrorNotInRange:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
