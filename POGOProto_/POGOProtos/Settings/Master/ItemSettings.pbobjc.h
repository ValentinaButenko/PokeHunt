// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/ItemSettings.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class POGOBattleAttributes;
@class POGOEggIncubatorAttributes;
@class POGOExperienceBoostAttributes;
@class POGOFoodAttributes;
@class POGOFortModifierAttributes;
@class POGOIncenseAttributes;
@class POGOInventoryUpgradeAttributes;
@class POGOPokeballAttributes;
@class POGOPotionAttributes;
@class POGOReviveAttributes;
GPB_ENUM_FWD_DECLARE(POGOItemCategory);
GPB_ENUM_FWD_DECLARE(POGOItemId);
GPB_ENUM_FWD_DECLARE(POGOItemType);

NS_ASSUME_NONNULL_BEGIN

#pragma mark - POGOItemSettingsRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface POGOItemSettingsRoot : GPBRootObject
@end

#pragma mark - POGOItemSettings

typedef GPB_ENUM(POGOItemSettings_FieldNumber) {
  POGOItemSettings_FieldNumber_ItemId = 1,
  POGOItemSettings_FieldNumber_ItemType = 2,
  POGOItemSettings_FieldNumber_Category = 3,
  POGOItemSettings_FieldNumber_DropFreq = 4,
  POGOItemSettings_FieldNumber_DropTrainerLevel = 5,
  POGOItemSettings_FieldNumber_Pokeball = 6,
  POGOItemSettings_FieldNumber_Potion = 7,
  POGOItemSettings_FieldNumber_Revive = 8,
  POGOItemSettings_FieldNumber_Battle = 9,
  POGOItemSettings_FieldNumber_Food = 10,
  POGOItemSettings_FieldNumber_InventoryUpgrade = 11,
  POGOItemSettings_FieldNumber_XpBoost = 12,
  POGOItemSettings_FieldNumber_Incense = 13,
  POGOItemSettings_FieldNumber_EggIncubator = 14,
  POGOItemSettings_FieldNumber_FortModifier = 15,
};

@interface POGOItemSettings : GPBMessage

@property(nonatomic, readwrite) enum POGOItemId itemId;

@property(nonatomic, readwrite) enum POGOItemType itemType;

@property(nonatomic, readwrite) enum POGOItemCategory category;

@property(nonatomic, readwrite) float dropFreq;

@property(nonatomic, readwrite) int32_t dropTrainerLevel;

@property(nonatomic, readwrite, strong, null_resettable) POGOPokeballAttributes *pokeball;
/// Test to see if @c pokeball has been set.
@property(nonatomic, readwrite) BOOL hasPokeball;

@property(nonatomic, readwrite, strong, null_resettable) POGOPotionAttributes *potion;
/// Test to see if @c potion has been set.
@property(nonatomic, readwrite) BOOL hasPotion;

@property(nonatomic, readwrite, strong, null_resettable) POGOReviveAttributes *revive;
/// Test to see if @c revive has been set.
@property(nonatomic, readwrite) BOOL hasRevive;

@property(nonatomic, readwrite, strong, null_resettable) POGOBattleAttributes *battle;
/// Test to see if @c battle has been set.
@property(nonatomic, readwrite) BOOL hasBattle;

@property(nonatomic, readwrite, strong, null_resettable) POGOFoodAttributes *food;
/// Test to see if @c food has been set.
@property(nonatomic, readwrite) BOOL hasFood;

@property(nonatomic, readwrite, strong, null_resettable) POGOInventoryUpgradeAttributes *inventoryUpgrade;
/// Test to see if @c inventoryUpgrade has been set.
@property(nonatomic, readwrite) BOOL hasInventoryUpgrade;

@property(nonatomic, readwrite, strong, null_resettable) POGOExperienceBoostAttributes *xpBoost;
/// Test to see if @c xpBoost has been set.
@property(nonatomic, readwrite) BOOL hasXpBoost;

@property(nonatomic, readwrite, strong, null_resettable) POGOIncenseAttributes *incense;
/// Test to see if @c incense has been set.
@property(nonatomic, readwrite) BOOL hasIncense;

@property(nonatomic, readwrite, strong, null_resettable) POGOEggIncubatorAttributes *eggIncubator;
/// Test to see if @c eggIncubator has been set.
@property(nonatomic, readwrite) BOOL hasEggIncubator;

@property(nonatomic, readwrite, strong, null_resettable) POGOFortModifierAttributes *fortModifier;
/// Test to see if @c fortModifier has been set.
@property(nonatomic, readwrite) BOOL hasFortModifier;

@end

/// Fetches the raw value of a @c POGOItemSettings's @c itemId property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOItemSettings_ItemId_RawValue(POGOItemSettings *message);
/// Sets the raw value of an @c POGOItemSettings's @c itemId property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOItemSettings_ItemId_RawValue(POGOItemSettings *message, int32_t value);

/// Fetches the raw value of a @c POGOItemSettings's @c itemType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOItemSettings_ItemType_RawValue(POGOItemSettings *message);
/// Sets the raw value of an @c POGOItemSettings's @c itemType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOItemSettings_ItemType_RawValue(POGOItemSettings *message, int32_t value);

/// Fetches the raw value of a @c POGOItemSettings's @c category property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t POGOItemSettings_Category_RawValue(POGOItemSettings *message);
/// Sets the raw value of an @c POGOItemSettings's @c category property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetPOGOItemSettings_Category_RawValue(POGOItemSettings *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
